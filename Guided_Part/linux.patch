diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index f2a4d1ff6..0f1fcabbc 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -3,6 +3,7 @@
 # Makefile for misc devices that really don't fit anywhere else.
 #
 
+obj-y += my-rng.o
 obj-$(CONFIG_IBM_ASM)		+= ibmasm/
 obj-$(CONFIG_IBMVMC)		+= ibmvmc.o
 obj-$(CONFIG_AD525X_DPOT)	+= ad525x_dpot.o
diff --git a/drivers/misc/my-rng.c b/drivers/misc/my-rng.c
new file mode 100644
index 000000000..5e4aebfc6
--- /dev/null
+++ b/drivers/misc/my-rng.c
@@ -0,0 +1,79 @@
+#include <linux/ioctl.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/uaccess.h>
+#include <linux/io.h>
+
+#define MY_RNG_IOCTL_RAND _IOR('q', 1, unsigned int)
+#define MY_RNG_IOCTL_SEED _IOW('q', 1, unsigned int)
+
+#define DEVICE_BASE_PHYS_ADDR 0xfebf1000
+
+void *devmem = 0x0;
+
+static long my_rng_ioctl(struct file *file, unsigned int cmd, unsigned long arg) {
+
+    switch (cmd) {
+        
+        case MY_RNG_IOCTL_RAND:
+            /* Application requests a new random number */
+            /* TODO implement that feature */
+	    
+            unsigned int r = ioread32(devmem);
+	    if (copy_to_user((unsigned int *)arg, &r, 4))
+	    	return -EFAULT;
+	    break;
+
+        case MY_RNG_IOCTL_SEED:
+            /* Application requests to seed the RNG */
+            /* TODO implement that feature */
+	    unsigned int seed;
+	    if (copy_from_user(&seed, (unsigned int *)arg, 4))
+		return -EFAULT;
+	    iowrite32(seed, devmem+4);
+            break;
+
+        default:
+            return -ENOTTY; // unknown command
+    }
+
+    return 0;
+}
+
+static struct file_operations my_rng_fops = {
+    .unlocked_ioctl = my_rng_ioctl,
+};
+
+static int __init my_rng_driver_init(void) {
+    devmem = ioremap(DEVICE_BASE_PHYS_ADDR, 4096);
+
+    if(!devmem) {
+        printk(KERN_ERR "Failed to map device registers in memory");
+        return -1;
+    }
+
+    if (register_chrdev(250, "my_rng_driver", &my_rng_fops) < 0) {
+        printk(KERN_ERR "Failed to register my_rng_driver\n");
+        return -1;
+    }
+
+    printk("my_rng_driver loaded, registered ioctls 0x%lx (get a random "
+        "number) and 0x%lx (seed the generator) \n", MY_RNG_IOCTL_RAND,
+        MY_RNG_IOCTL_SEED);
+    return 0;
+}
+
+static void __exit my_rng_driver_exit(void) {
+    unregister_chrdev(250, "my_rng_driver");
+
+    if(devmem)
+        iounmap(devmem);
+
+    printk(KERN_INFO "my_rng_driver unloaded\n");
+}
+
+module_init(my_rng_driver_init);
+module_exit(my_rng_driver_exit);
+
diff --git a/init/main.c b/init/main.c
index 436d73261..45a4be855 100644
--- a/init/main.c
+++ b/init/main.c
@@ -1458,6 +1458,37 @@ static int __ref kernel_init(void *unused)
 	rcu_end_inkernel_boot();
 
 	do_sysctl_args();
+	printk("------------------------------------------------------------------\n");
+	printk("BEGIN MY-RNG TEST\n");
+	printk("------------------------------------------------------------------\n");
+
+	// Map the area of physical memory corresponding to the device's registers
+	// (starting 0xfebf1000, size 4KB) somewhere in virtual memory at address
+	// devmem. Notice that the physical memory where the device's registers are
+	// present may be different on your computer, use lspci -v in the VM to
+	// find it
+	void *devmem = ioremap(0xfebf1000, 4096);
+	unsigned int data = 0x0;
+	if(devmem) {
+    	    for(int i=0; i<2; i++) {
+        	// seed with 0x42 by writing that value in the seed register which
+        	// is located at base address + 4 bytes
+        	iowrite32(0x42, devmem+4);
+
+        	// obtain and print 5 random numbers by reading the relevant
+        	// register located at base address + 0
+        	for(int j=0; j<5; j++) {
+            		data = ioread32(devmem);
+            		printk("Round %d number %d: %u", i, j, data);
+        	}
+	     }
+	} else {
+    		printk("ERROR: cannot map device registers\n");
+	}
+
+	printk("------------------------------------------------------------------\n");
+	printk("END MY-RNG TEST\n");
+	printk("------------------------------------------------------------------\n");
 
 	if (ramdisk_execute_command) {
 		ret = run_init_process(ramdisk_execute_command);
